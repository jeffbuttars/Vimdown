

# Vimdown

# Vimdown


# Vimdown

## TOC

# Vimdown

## TOC
* [Install](#install)

# Vimdown

## TOC
* [Install](#install)
* [Overview](#overview)

# Vimdown

## TOC
* [Install](#install)
* [Overview](#overview)
* [Usage](#usage)

# Vimdown

## TOC
* [Install](#install)
* [Overview](#overview)
* [Usage](#usage)
	* [Basic](#usage_basic)

# Vimdown

## TOC
* [Install](#install)
* [Overview](#overview)
* [Usage](#usage)
	* [Basic](#usage_basic)
	* [Advanced](#usage_advanced)

# Vimdown

## TOC
* [Install](#install)
* [Overview](#overview)
* [Usage](#usage)
	* [Basic](#usage_basic)
	* [Advanced](#usage_advanced)
* [Examples](#examples)

# Vimdown

## TOC
* [Install](#install)
* [Overview](#overview)
* [Usage](#usage)
	* [Basic](#usage_basic)
	* [Advanced](#usage_advanced)
* [Examples](#examples)
  * [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)

# Vimdown

## TOC
* [Install](#install)
* [Overview](#overview)
* [Usage](#usage)
	* [Basic](#usage_basic)
	* [Advanced](#usage_advanced)
* [Examples](#examples)
  * [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
* [Changes](#changes)

# Vimdown

## TOC
* [Install](#install)
* [Overview](#overview)
* [Usage](#usage)
	* [Basic](#usage_basic)
	* [Advanced](#usage_advanced)
* [Examples](#examples)
  * [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
* [Changes](#changes)


# Vimdown

## TOC
* [Install](#install)
* [Overview](#overview)
* [Usage](#usage)
	* [Basic](#usage_basic)
	* [Advanced](#usage_advanced)
* [Examples](#examples)
  * [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
* [Changes](#changes)



# Vimdown

## TOC
* [Install](#install)
* [Overview](#overview)
* [Usage](#usage)
	* [Basic](#usage_basic)
	* [Advanced](#usage_advanced)
* [Examples](#examples)
  * [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
* [Changes](#changes)


__________


# Vimdown

## TOC
* [Install](#install)
* [Overview](#overview)
* [Usage](#usage)
	* [Basic](#usage_basic)
	* [Advanced](#usage_advanced)
* [Examples](#examples)
  * [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
* [Changes](#changes)


__________



<a name="install"></a>

<a name="install"></a>
## Install

<a name="install"></a>
## Install


<a name="install"></a>
## Install

The easiest way to install is to use pip

<a name="install"></a>
## Install

The easiest way to install is to use pip

```vim
pip install vimdown
```

```vim
pip install vimdown
```
Or you can [chose an install download from
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.

Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>

Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>

Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>


Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>



Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>

Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
" comment 
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
" comment 
</pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
" comment 
</pre>
will render as:  
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
" comment 
</pre>
will render as:  
# comment   
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
" comment 
</pre>
will render as:  
# comment   
_comment_   
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
" comment 
</pre>
will render as:  
# comment   
_comment_   
comment   
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
" comment 
</pre>
will render as:  
# comment   
_comment_   
comment   

Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
" comment 
</pre>
will render as:  
# comment   
_comment_   
comment   

Another comment block, the comment starts in an extra space:
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
" comment 
</pre>
will render as:  
# comment   
_comment_   
comment   

Another comment block, the comment starts in an extra space:
<pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
" comment 
</pre>
will render as:  
# comment   
_comment_   
comment   

Another comment block, the comment starts in an extra space:
<pre>
 " [comment](http://google.com)
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
" comment 
</pre>
will render as:  
# comment   
_comment_   
comment   

Another comment block, the comment starts in an extra space:
<pre>
 " [comment](http://google.com)
 " comment 
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
" comment 
</pre>
will render as:  
# comment   
_comment_   
comment   

Another comment block, the comment starts in an extra space:
<pre>
 " [comment](http://google.com)
 " comment 
 " __comment__
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
" comment 
</pre>
will render as:  
# comment   
_comment_   
comment   

Another comment block, the comment starts in an extra space:
<pre>
 " [comment](http://google.com)
 " comment 
 " __comment__
</pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
" comment 
</pre>
will render as:  
# comment   
_comment_   
comment   

Another comment block, the comment starts in an extra space:
<pre>
 " [comment](http://google.com)
 " comment 
 " __comment__
</pre>
renders as:  
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
" comment 
</pre>
will render as:  
# comment   
_comment_   
comment   

Another comment block, the comment starts in an extra space:
<pre>
 " [comment](http://google.com)
 " comment 
 " __comment__
</pre>
renders as:  
 [comment](http://google.com)   
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
" comment 
</pre>
will render as:  
# comment   
_comment_   
comment   

Another comment block, the comment starts in an extra space:
<pre>
 " [comment](http://google.com)
 " comment 
 " __comment__
</pre>
renders as:  
 [comment](http://google.com)   
 comment   
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
" comment 
</pre>
will render as:  
# comment   
_comment_   
comment   

Another comment block, the comment starts in an extra space:
<pre>
 " [comment](http://google.com)
 " comment 
 " __comment__
</pre>
renders as:  
 [comment](http://google.com)   
 comment   
 __comment__  
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
" comment 
</pre>
will render as:  
# comment   
_comment_   
comment   

Another comment block, the comment starts in an extra space:
<pre>
 " [comment](http://google.com)
 " comment 
 " __comment__
</pre>
renders as:  
 [comment](http://google.com)   
 comment   
 __comment__  

Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
" comment 
</pre>
will render as:  
# comment   
_comment_   
comment   

Another comment block, the comment starts in an extra space:
<pre>
 " [comment](http://google.com)
 " comment 
 " __comment__
</pre>
renders as:  
 [comment](http://google.com)   
 comment   
 __comment__  

This will be considered a code block:  
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
" comment 
</pre>
will render as:  
# comment   
_comment_   
comment   

Another comment block, the comment starts in an extra space:
<pre>
 " [comment](http://google.com)
 " comment 
 " __comment__
</pre>
renders as:  
 [comment](http://google.com)   
 comment   
 __comment__  

This will be considered a code block:  
<pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
" comment 
</pre>
will render as:  
# comment   
_comment_   
comment   

Another comment block, the comment starts in an extra space:
<pre>
 " [comment](http://google.com)
 " comment 
 " __comment__
</pre>
renders as:  
 [comment](http://google.com)   
 comment   
 __comment__  

This will be considered a code block:  
<pre>
    " [comment](http://google.com) 
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
" comment 
</pre>
will render as:  
# comment   
_comment_   
comment   

Another comment block, the comment starts in an extra space:
<pre>
 " [comment](http://google.com)
 " comment 
 " __comment__
</pre>
renders as:  
 [comment](http://google.com)   
 comment   
 __comment__  

This will be considered a code block:  
<pre>
    " [comment](http://google.com) 
    " # comment 
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
" comment 
</pre>
will render as:  
# comment   
_comment_   
comment   

Another comment block, the comment starts in an extra space:
<pre>
 " [comment](http://google.com)
 " comment 
 " __comment__
</pre>
renders as:  
 [comment](http://google.com)   
 comment   
 __comment__  

This will be considered a code block:  
<pre>
    " [comment](http://google.com) 
    " # comment 
    " comment 
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
" comment 
</pre>
will render as:  
# comment   
_comment_   
comment   

Another comment block, the comment starts in an extra space:
<pre>
 " [comment](http://google.com)
 " comment 
 " __comment__
</pre>
renders as:  
 [comment](http://google.com)   
 comment   
 __comment__  

This will be considered a code block:  
<pre>
    " [comment](http://google.com) 
    " # comment 
    " comment 
</pre>
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
" comment 
</pre>
will render as:  
# comment   
_comment_   
comment   

Another comment block, the comment starts in an extra space:
<pre>
 " [comment](http://google.com)
 " comment 
 " __comment__
</pre>
renders as:  
 [comment](http://google.com)   
 comment   
 __comment__  

This will be considered a code block:  
<pre>
    " [comment](http://google.com) 
    " # comment 
    " comment 
</pre>
rendered as:
Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
" comment 
</pre>
will render as:  
# comment   
_comment_   
comment   

Another comment block, the comment starts in an extra space:
<pre>
 " [comment](http://google.com)
 " comment 
 " __comment__
</pre>
renders as:  
 [comment](http://google.com)   
 comment   
 __comment__  

This will be considered a code block:  
<pre>
    " [comment](http://google.com) 
    " # comment 
    " comment 
</pre>
rendered as:

Or you can [chose an install download from
GitHub](https://github.com/jeffbuttars/Vimdown/downloads)

<a name="overview"></a>
## Overview
Vimdown transforms .vim files into markdown documents.  
Vimdown was born out of an itch to make my .vimrc look nice as the README.mkd file for my GitHub 
repository that holds my .vim directory.  
This README was written as a vim file and rendered to markdown with vimdown.  

Vimdown is a very simple parser. All it does is seperate a Vim file
into blocks of text that either contiguous comments or contiguous
non-comments. Blocks of comments are stripped of their comment 
marks, '"', from the begining of the line and considered
to be in markdown syntax. Non-comment blocks are considered 
code blocks and are inserted into the resulting markdown document
as explicit vim codeblocks. Only lines with the comment mark,
'"', as the first or second character of the line are considered 
comments. If the comment mark starts later in the line it will be
considered code with a comment in the code block.


<a name="usage" /></a>
## Usage
Vimdown has built in help output
<pre>
> vimdown --help 
</pre>


<a name="usage_basic" /></a>
### Basic

Simply give the vimdown command a file or files to process and it will
print out the result to stdout:
<pre>
> vimdown infile > outfile
</pre>

You can specify an output file:
<pre>
> vimdown -o outfile infile
</pre>

If your using vimdown to create a GitHub README use the -g option:
<pre>
> vimdown -g -o outfile infile
</pre>

Using multiple input files:
<pre>
> vimdown infile infile2 infile3 -o outfile
</pre>




<a name="usage_advanced" /></a>
### Advanced

#### Markdown2 code blocks
You can have markdown2 style code blocks with -c :
<pre>
> vimdown -c -o outfile infile
</pre>

That will create code blocks in the markdown in the style of:
<pre>
    :::vim
    code is here
</pre>

#### GitHub code fencing 
You can have GitHub code fencing with -g :
<pre>
> vimdown -g -o outfile infile
</pre>

That will create code blocks in the style of:
<pre>
```vim
code is here
another line of code is here
```
</pre>


#### Render to HTML
If you have markdown2 installed you can ask vimdown to render
the markdown to HTML for you with the -t option.

This will render a basic markdown document as HTML into
the outfile
<pre>
> vimdown -t -o outfile infile
</pre>

This will render a markdown document with markdown2 codeblocks as HTML into
the outfile
<pre>
> vimdown -c -t -o outfile infile
</pre>

#### Pygments Styles
If you have both Markdown2 and Pygments installed you can have 
vimdown render the output as an HTML document with the code
markup styled for Pygments. Use the -p option:
<pre>
> vimdown -p -o outfile infile
</pre>

<a name="examples" /></a>
## Examples

To see real world usage of vimdown, checkout the README for the [Viming-With-Buttars](https://github.com/jeffbuttars/Viming-With-Buttars)
project.  

Everything you've seen in the document so far is an example of how vimdown
renders comments in a vim file. 

Comment blocks must have the '"' comment mark in the first or second character
position of the line.  

The comment block:
<pre>
" # comment 
" _comment_ 
" comment 
</pre>
will render as:  
# comment   
_comment_   
comment   

Another comment block, the comment starts in an extra space:
<pre>
 " [comment](http://google.com)
 " comment 
 " __comment__
</pre>
renders as:  
 [comment](http://google.com)   
 comment   
 __comment__  

This will be considered a code block:  
<pre>
    " [comment](http://google.com) 
    " # comment 
    " comment 
</pre>
rendered as:



The following examples are how it will render 

The following examples are how it will render 
code blocks.  

The following examples are how it will render 
code blocks.  

```vim
if variable < 10
```

```vim
if variable < 10
    let g:variable = 0
```

```vim
if variable < 10
    let g:variable = 0
endif
```

```vim
if variable < 10
    let g:variable = 0
endif
```
A code block with comments
A code block with comments

```vim
if filereadable( tstr )
```

```vim
if filereadable( tstr )
    " make sure our big ass bsd tags file
```

```vim
if filereadable( tstr )
    " make sure our big ass bsd tags file
    " is used in subdirs as well.
```

```vim
if filereadable( tstr )
    " make sure our big ass bsd tags file
    " is used in subdirs as well.
    set tags+=tstr " comment at end of line
```

```vim
if filereadable( tstr )
    " make sure our big ass bsd tags file
    " is used in subdirs as well.
    set tags+=tstr " comment at end of line
endif
```

```vim
if filereadable( tstr )
    " make sure our big ass bsd tags file
    " is used in subdirs as well.
    set tags+=tstr " comment at end of line
endif
```

```vim
if filereadable( tstr )
    " make sure our big ass bsd tags file
    " is used in subdirs as well.
    set tags+=tstr " comment at end of line
endif
```
<a name="changes" /></a>
<a name="changes" /></a>
## Changes
<a name="changes" /></a>
## Changes

<a name="changes" /></a>
## Changes

* 1.1.0 Added the -g option to enable GitHub style code fencing. This makes
<a name="changes" /></a>
## Changes

* 1.1.0 Added the -g option to enable GitHub style code fencing. This makes
code render with hilighting on GitHub.
<a name="changes" /></a>
## Changes

* 1.1.0 Added the -g option to enable GitHub style code fencing. This makes
code render with hilighting on GitHub.
* 1.1.1 Vimdown now removes leading and trailing empty lines from code
<a name="changes" /></a>
## Changes

* 1.1.0 Added the -g option to enable GitHub style code fencing. This makes
code render with hilighting on GitHub.
* 1.1.1 Vimdown now removes leading and trailing empty lines from code
blocks.
