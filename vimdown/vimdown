#!/usr/bin/env python

import sys
import os
import logging
from optparse import OptionParser

# Set up the vimdown logger
logger = logging.getLogger('vimdown')
# Use a console handler
logger_ch = logging.StreamHandler()
logger.setLevel('INFO')

log_formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
logger_ch.setFormatter(log_formatter)
logger.addHandler(logger_ch)


# If we're running this script in the src directory, not as an installation
# we need augment the path to allow the vimdown.parser import to work.
# Also, enable DEBUG logging in this scenario
THIS_DIR_ROOT = os.path.dirname(os.path.realpath(__file__))
if os.path.exists(os.path.join(THIS_DIR_ROOT, 'parser.py')):
    sys.path.append(os.path.join(THIS_DIR_ROOT, '../'))
    logger.setLevel('DEBUG')

from vimdown.parser import Parser


def main():
    usage = ("%prog, Convert .vimrc and vimscript into markdown\n"
                "%prog <options> infile [infile2] [infile3] [....]")

    opt_parser = OptionParser(usage=usage)
    opt_parser.add_option("-o", "--outfile", dest='outfile', default=False,
                      help=("Write the output to the given filename"))
    opt_parser.add_option("-t", "--html", dest='html', action='store_true',
                      default=False,
                      help=("If markdown2 is present then vimdown will"
                            " will process the markdown using markdown2 and"
                            " and output the resulting HTML"
                            ))
    opt_parser.add_option("-c", "--codeblock", dest='codeblock',
                      action='store_true', default=False,
                      help=("If set, the code blocks in the generated "
                            "markdown will be"
                            " the markdown2 extended syntax."
                            ))
    opt_parser.add_option("-g", "--ghubfence", dest='ghubfence',
                          action='store_true', default=False,
                        help=("If set, the code blocks in the generated"
                            " markdown will be"
                            " GitHub code fence syntax."
                        ))
    opt_parser.add_option("-p", "--pygmentize", dest='pygmentize',
                      action='store_true', default=False,
                      help=("If markdown2 is present then vimdown will"
                            " will output html using markdown2's pygments"
                            " code coloring. If this option is present the "
                            "--html and --codeblock"
                            " options are implied. In fact, this is a short "
                            "cut for '-c -t'"
                            ))

    (options, args) = opt_parser.parse_args()
    logger.debug("options:%s" % options)
    logger.debug("args:%s" % args)

    if len(args) < 1:
        opt_parser.print_help()
        sys.exit(9)

    try:
        infiles = []
        if args:
            infiles += args
        else:
            infiles.append(sys.stdin)

        logger.debug("infiles : %s" % (infiles,))

        res = ""
        for fl in infiles:
            # Check for the existence of the input file before we proceed
            if not os.path.exists(fl):
                logger.warning("Input file '%s' does not exist!" % (fl))
                continue

            parser = Parser(fl, m2code=options.codeblock,
                            ghubf=options.ghubfence,
                            pyg=options.pygmentize)
            if options.html or options.pygmentize:
                res = parser.gen_html().encode('utf-8')
            else:
                res = parser.gen_markdown()

        outfile = options.outfile
        logger.debug("outfile : %s" % (outfile,))

        # Check for actual output before we open the output file.
        if not res:
            raise Exception(("No markdown created. "
                             "Nottoo writing to output file %s") % (outfile,))

        if not outfile:
            outfile = sys.stdout
        else:
            outfile = open(outfile, 'w')

        outfile.write(res)
    except Exception:
        opt_parser.print_help()
        raise
#main()

if __name__ == '__main__':
    main()

# vim:set ft=python:
