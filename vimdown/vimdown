#!/usr/bin/env python

import sys
import logging
from optparse import OptionParser

try:
    from vimdown.parser import Parser
except ImportError:
    from parser import Parser

#logging.basicConfig(level=logging.DEBUG,
#                    format='%(asctime)s %(levelname)s %(message)s')
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s %(levelname)s %(message)s')


def main():
    usage = ("%prog, Convert .vimrc and vimscript into markdown\n"
                "%prog <options> infile [infile2] [infile3] [....]")

    opt_parser = OptionParser(usage=usage)
    opt_parser.add_option("-o", "--outfile", dest='outfile', default=False,
                      help=("Write the output to the given filename"))
    opt_parser.add_option("-t", "--html", dest='html', action='store_true',
                      default=False,
                      help=("If markdown2 is present then vimdown will"
                            " will process the markdown using markdown2 and"
                            " and output the resulting HTML"
                            ))
    opt_parser.add_option("-c", "--codeblock", dest='codeblock',
                      action='store_true', default=False,
                      help=("If set, the code blocks in the generated "
                            "markdown will be"
                            " the markdown2 extended syntax."
                            ))
    opt_parser.add_option("-g", "--ghubfence", dest='ghubfence',
                          action='store_true', default=False,
                        help=("If set, the code blocks in the generated"
                            " markdown will be"
                            " GitHub code fence syntax."
                        ))
    opt_parser.add_option("-p", "--pygmentize", dest='pygmentize',
                      action='store_true', default=False,
                      help=("If markdown2 is present then vimdown will"
                            " will output html using markdown2's pygments"
                            " code coloring. If this option is present the "
                            "--html and --codeblock"
                            " options are implied. In fact, this is a short "
                            "cut for '-c -t'"
                            ))

    (options, args) = opt_parser.parse_args()
    logging.debug("options:%s" % options)
    logging.debug("args:%s" % args)

    if len(args) < 1:
        opt_parser.print_help()
        sys.exit(9)

    try:
        outfile = options.outfile
        if not outfile:
            outfile = sys.stdout
        else:
            outfile = open(outfile, 'w')

        infiles = []
        if args:
            infiles += args
        else:
            infiles.append(sys.stdin)

        logging.debug("outfile : %s, infiles : %s" % (outfile, infiles))

        for fl in infiles:
            parser = Parser(fl, m2code=options.codeblock,
                            ghubf=options.ghubfence,
                            pyg=options.pygmentize)
            res = ""
            if options.html or options.pygmentize:
                res = parser.gen_html().encode('utf-8')
            else:
                res = parser.gen_markdown()

            outfile.write(res)
    except Exception:
        opt_parser.print_help()
        raise
#main()

if __name__ == '__main__':
    main()

# vim:set ft=python:
